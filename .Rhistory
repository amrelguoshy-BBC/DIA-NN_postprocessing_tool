install.packages("RInno", dependencies = TRUE)
install.packages("remotes")
remotes::install_github("ficonsulting/RInno", force = TRUE)
git --version
remotes::install_github("ficonsulting/RInno", force = TRUE)
remotes::install_github("ficonsulting/RInno", force = TRUE)
library(RInno)
library(RInno)
RInno::install_inno()
create_app(app_name = "MyShinyApp", app_dir = "C:/path/to/MyShinyApp")
library(RInno)
RInno::install_inno()
create_app(app_name = "MyShinyApp", app_dir = "C:/path/to/MyShinyApp")
library(RInno)
RInno::install_inno()
create_app(app_name = "MyShinyApp", app_dir = "C:\\MyShinyApp")
remove.packages("cli")
install.packages("cli")
library(RInno)
RInno::install_inno()
create_app(app_name = "MyShinyApp", app_dir = "C:\\MyShinyApp")
R.version.string
install.packages(c("cli", "data.table", "lattice", "mgcv", "parallelly", "purrr", "Rcpp", "rlang", "stringi", "xfun"), dependencies = TRUE)
library(RInno)
RInno::install_inno()
create_app(app_name = "MyShinyApp", app_dir = "C:\\MyShinyApp")
R.version.string
library(RInno)
RInno::install_inno()
create_app(app_name = "MyShinyApp", app_dir = "C:\\MyShinyApp")
library(RInno)
RInno::install_inno()
create_app(app_name = "MyShinyApp", app_dir = "C:\\MyShinyApp")
R_version
R_version("4.3.3")
R.version.string
cfg <- RInno::create_app(
app_name = "MyApp",
app_dir = "path/to/app",
R_version = "4.3.3"  # Ensure this version exists on CRAN
)
remove.packages("RInno")
install.packages("RInno")
library(RInno)
RInno::install_inno()
create_app(app_name = "MyShinyApp", app_dir = "C:\\MyShinyApp")
R_version("4.3.3")
R_version("4.3.3")
R.version.string
R.version.string
R.version.string
R.version.string
library(shiny)
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\for_github\\app.R")
runApp("C:\for_github\\app.R")
runApp("C:\\for_github\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
library(shiny)
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\app.R")
library(shiny)
runApp("E:\\for_github\\reco.R")
ui <- fluidPage(
useShinyjs(),
tags$head(
tags$style(HTML("
/* Main background with gradient */
body {
background: linear-gradient(135deg, #f5f7fa 0%, #e6f0f9 100%);
font-family: 'Roboto', sans-serif;
}
/* Spinner styling */
#spinner-div {
position: fixed;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
background: rgba(255,255,255,0.9);
padding: 20px;
border-radius: 10px;
box-shadow: 0 4px 8px rgba(0,0,0,0.1);
z-index: 1050;
display: none;
}
/* Title styling */
.title-container {
background: linear-gradient(to right, #3498db, #2c3e50);
color: white;
padding: 20px;
margin-bottom: 20px;
border-radius: 5px;
box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}
.title {
text-align: center;
font-weight: 700;
font-size: 28px;
margin-bottom: 5px;
}
.subtitle {
text-align: center;
font-size: 16px;
opacity: 0.9;
}
/* Panel styling */
.well-panel {
background-color: white;
border-radius: 8px;
box-shadow: 0 2px 4px rgba(0,0,0,0.05);
padding: 20px;
margin-bottom: 20px;
border-left: 4px solid #3498db;
}
/* Tab styling */
.nav-tabs {
border-bottom: 2px solid #dee2e6;
}
.nav-tabs > li > a {
color: #2c3e50;
font-weight: 500;
border-radius: 4px 4px 0 0;
margin-right: 5px;
}
.nav-tabs > li.active > a {
color: #3498db;
border-bottom: 3px solid #3498db;
background-color: transparent;
}
/* Button styling */
.btn-action {
background-color: #3498db;
color: white;
border: none;
border-radius: 4px;
padding: 8px 16px;
font-weight: 500;
transition: all 0.3s ease;
}
.btn-action:hover {
background-color: #2980b9;
transform: translateY(-2px);
box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}
/* Table styling */
.dataTables_wrapper {
border-radius: 8px;
box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}
/* Notification styling */
.shiny-notification {
position: fixed;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
background-color: rgba(255,255,255,0.95);
border-left: 5px solid #3498db;
border-radius: 4px;
box-shadow: 0 4px 8px rgba(0,0,0,0.1);
padding: 15px;
max-width: 80%;
}
/* Message boxes */
.msg-box {
background-color: #f8f9fa;
border-left: 4px solid #3498db;
padding: 10px;
margin-bottom: 10px;
border-radius: 4px;
font-family: 'Courier New', monospace;
}
/* Add Roboto font */
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap');
")),
# Add Font Awesome for icons
tags$link(rel = "stylesheet", href = "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css")
),
# Spinner element
tags$div(id = "spinner-div",
tags$div(class = "spinner-border text-primary", style = "width: 3rem; height: 3rem;", role = "status",
tags$span(class = "sr-only", "Loading...")),
tags$div(style = "margin-top: 10px; font-weight: bold;", "Processing your data...")
),
# Title panel
div(class = "title-container",
div(class = "title",
icon("chart-line"),
"Quantitative Urine Proteomics Analysis"
),
div(class = "subtitle",
"Enhanced Post-Processing and Visualization of MS/DIA-NN Data"
)
),
tabsetPanel(
id = "tabs",
# Tab 1: Library Creation
tabPanel(
title = span(icon("flask"), "Create Spectral Library"),
value = "tab1",
fluidRow(
column(
width = 12,
div(class = "well-panel",
h4(icon("file-import"), "Import mzID Files"),
fileInput("directory", NULL, accept = ".mzid", multiple = FALSE,
buttonLabel = span(icon("folder-open"), "Browse..."),
placeholder = "No file selected"),
actionButton("create", span(icon("magic"), "Create DDA Library"),
class = "btn-action")
),
div(class = "well-panel",
h4(icon("info-circle"), "Processing Log"),
div(class = "msg-box", verbatimTextOutput("msg1", placeholder = FALSE)),
div(class = "msg-box", verbatimTextOutput("msg2", placeholder = FALSE)),
div(class = "msg-box", verbatimTextOutput("msg3", placeholder = FALSE)),
div(class = "msg-box", verbatimTextOutput("msg4", placeholder = FALSE))
)
)
),
fluidRow(
column(
width = 12,
div(class = "well-panel",
h4(icon("table"), "Peptide Information"),
shinycssloaders::withSpinner(DTOutput("pep_info")),
div(class = "well-panel",
h4(icon("sliders-h"), "Filter Options"),
sliderInput("pep_exp", "Peptide Expectation Value Range:",
min = 0, max = 1, value = c(0, 1), width = "100%"),
downloadButton("download", span(icon("download"), "Download Results"),
class = "btn-action")
)
)
)
),
# Tab 2: CSV Import and Analysis
tabPanel(
title = span(icon("file-csv"), "Import CSV Files"),
value = "tab2",
fluidRow(
column(
width = 6,
div(class = "well-panel",
h4(icon("upload"), "Import Data"),
fileInput("csv_directory", NULL, accept = ".csv", multiple = TRUE,
buttonLabel = span(icon("folder-open"), "Browse..."),
placeholder = "No files selected"),
actionButton("import_csv", span(icon("file-import"), "Import CSV Files"),
class = "btn-action")
),
div(class = "well-panel",
h4(icon("filter"), "Analysis Parameters"),
selectInput("num_of_sms", "Number of Samples to Filter:", choices = ""),
selectInput("cols", "Column to Visualize:", choices = ""),
div(class = "msg-box", verbatimTextOutput("csv_msg", placeholder = FALSE))
)
),
column(
width = 6,
div(class = "well-panel",
h4(icon("chart-line"), "Visualizations"),
tabsetPanel(
tabPanel("Main Plots",
plotOutput("main_plot1"),
plotOutput("main_plot2", click = "plot_click1")
),
tabPanel("Quality Metrics",
plotOutput("boxplot", hover = "plot_click2"),
textOutput("peptide_info")
),
tabPanel("Chromatographic Features",
plotOutput("rt"),
plotOutput("im"),
plotOutput("mz"),
plotOutput("chr")
)
)
)
)
)
),
# Tab 3: Spectrum Selection
tabPanel(
title = span(icon("fingerprint"), "Spectrum Selection"),
value = "tab3",
fluidRow(
column(
width = 6,
div(class = "well-panel",
h4(icon("cogs"), "Selection Parameters"),
checkboxInput("rank1", span(icon("check-circle"), "Use only rank1 peptides"), value = TRUE),
numericInput("frg_num", span(icon("sliders-h"), "Fragment Ions per Spectrum:"),
value = 10, min = 6, max = 30),
selectInput("method", span(icon("list-ol"), "Selection Method:"),
choices = c("Best score", "Max intensity")),
actionButton("create_lib", span(icon("project-diagram"), "Create Optimized Library"),
class = "btn-action")
)
),
column(
width = 6,
div(class = "well-panel",
h4(icon("table"), "Selected Spectra"),
shinycssloaders::withSpinner(DTOutput('pep_info1')),
downloadButton("download2", span(icon("download"), "Download Library"),
class = "btn-action")
)
)
)
)
)
)
)
runApp("E:\\for_github\\reco.R")
runApp("E:\\for_github\\reco.R")
runApp("E:\\for_github\\reco.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\create_dda_lib\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\diann_postprocess\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final\\diann_postprocess\\app.R")
library(shiny)
runApp("C:\\Users\\User\\Desktop\\for_github_final\\diann_postprocess\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\diann_postprocess\\diann_postprocess\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\diann_postprocess\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\app.R")
r -version
version
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\app.R")
library(shiny)
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\reco.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\reco.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\reco.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\app.R")
library(shiny)
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\reco.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\reco.R")
runApp("E:\\for_github\\reco.R")
runApp("E:\\for_github\\reco.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\create_dda_lib\\reco.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\diann_postprocess\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
library(shiny)
runApp("E:\\for_github_final2025\\diann_postprocess\\app.R")
runApp("E:\\for_github_final2025\\diann_postprocess\\app.R")
runApp("E:\\for_github_final2025\\diann_postprocess\\app.R")
runApp("E:\\for_github_final2025\\diann_postprocess\\app.R")
runApp("E:\\for_github_final2025\\diann_postprocess\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
library(shiny)
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
path <- "C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\data\\dda_lib.csv"
library(れ)
library(readr)
sample_data_dda_lib <- read_csv(path)
saveRDS(sample_data_dda_lib, file = "C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\datasample_data_dda_lib.rds")
saveRDS(sample_data_dda_lib, file = "C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\data_sample_data_dda_lib.rds")
path <- "C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\data\\report.tsv"
sample_data_diann_report <- read_delim(path)
saveRDS(sample_data_diann_report, file = "C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\data\\sample_data_diann_report.rds")
path <- "C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\data\\report_lib.tsv"
sample_data_dia_lib <- read_tsv(path)
saveRDS(sample_data_dia_lib, file = "C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\data\\sample_data_dia_lib.rds")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
path <- "C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\data\\report-first-pass.tsv"
sample_data_diann_report_1st <- read_delim(path)
saveRDS(sample_data_diann_report_1st, file = "C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\data\\sample_data_diann_report_1st.rds")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
path <- "C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\data\\cosine_similarity_scores_dda.tsv"
sample_data_cosine_similarity_scores_dda <- read_delim(path)
saveRDS(sample_data_cosine_similarity_scores_dda, file = "C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\data\\sample_data_cosine_similarity_scores_dda.rds")
path <- "C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\data\\cosine_similarity_scores_dia.tsv"
sample_data_cosine_similarity_scores_dia <- read_delim(path)
saveRDS(sample_data_cosine_similarity_scores_dia, file = "C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\data\\sample_data_cosine_similarity_scores_dia.rds")
saveRDS(sample_data_cosine_similarity_scores_dia, file = "C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\data\\sample_data_cosine_similarity_scores_dia.rds")
saveRDS(sample_data_cosine_similarity_scores_dia, file = "C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\data\\sample_data_cosine_similarity_scores_dia.rds")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
library(SHINY)
library(shiny)
library(SHINY)
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
library(shiny)
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
library(shiny)
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
runApp("C:\\Users\\User\\Desktop\\for_github_final2025\\DIA-NN_postprocessing_tool\\app.R")
